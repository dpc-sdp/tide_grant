<?php

/**
 * @file
 * Tide Grant module functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\UrlHelper;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function tide_grant_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_grant_form', 'node_grant_edit_form'])) {
    $form["#validate"][] = '_tide_grant_validate_grant_dates';
    // Manipulate Guidelines fields on node add and edit.
    $form['#attached']['library'][] = 'tide_grant/drupal.paragraphs.actions';

    $form['field_node_dates']['widget'][0]['value']['#title'] = new TranslatableMarkup('Start date and time');
    $form['field_node_dates']['widget'][0]['end_value']['#title'] = new TranslatableMarkup('End date and time');

    $form['field_node_guidelines']['widget'][0]['subform']['field_paragraph_title']['widget'][0]['value']['#default_value'] = t('Guidelines');
    $form['field_node_guidelines']['widget'][0]['subform']['field_paragraph_title']['widget'][0]['value']['#required'] = TRUE;
    // Lookup our preset values from config.
    if ($config = \Drupal::config('tide_grant.settings')->get('guidelines')) {
      // Preset values should only be pre-filled from creating a new node.
      if ($form_id == 'node_grant_form') {
        foreach ($config as $key => $value) {
          if ($element = &$form['field_node_guidelines']['widget'][0]['subform']['field_paragraph_accordion']['widget'][$key]) {
            $element['subform']['field_paragraph_accordion_name']['widget'][0]['value']['#default_value'] = $value;
          }
        }
      }
    }
  }
}

/**
 * Custom validation function for Grant dates.
 *
 * @param array $form
 *   Form elements.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function _tide_grant_validate_grant_dates(array &$form, FormStateInterface $form_state) {
  $on_going = $form_state->getValue('field_node_on_going');
  $dates = $form_state->getValue('field_node_dates');
  $start_date = !empty($dates) ? $dates[0]["value"] : '';
  $end_date = !empty($dates) ? $dates[0]["end_value"] : '';
  $messenger = \Drupal::messenger();
  if ((empty($start_date) || empty($end_date)) && $on_going['value'] === 0) {
    $form_state->setError($form["field_node_dates"]["widget"][0]["value"], t('Start date is required'));
    $form_state->setError($form["field_node_dates"]["widget"][0]["end_value"], t('End date is required'));
    $messenger->addError(t('Add Grant dates or select Ongoing.'));
  }
}

/**
 * Implements hook_config_ignore_settings_alter().
 */
function tide_grant_config_ignore_settings_alter(array &$settings) {
  // Ignore the Content Rating webform so that it won't be reverted
  // during config sync.
  $settings[] = 'webform.webform.tide_grant_submission';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function tide_grant_webform_submission_presave($submission) {
  if ($submission->getWebform()->get('id') === 'tide_grant_submission') {
    $submission_data = $submission->getData();
    // Create node object with values from webform submission.
    $node = Node::create([
      'type' => 'grant',
      'title' => $submission_data['name_of_grant_or_program'],
      'field_description' => [
        'value' => $submission_data['describe_the_grant_or_program'],
      ],
      'field_landing_page_summary' => [
        'value' => $submission_data['describe_the_grant_or_program'],
      ],
      'field_node_dates' => [
        [
          'value' => $submission_data['open_date'] && $submission_data['close_date'] ? date('Y-m-d\TH:i:00', strtotime($submission_data['open_date'])) : NULL,
          'end_value' => $submission_data['open_date'] && $submission_data['close_date'] ? date('Y-m-d\TH:i:00', strtotime($submission_data['close_date'])) : NULL,
        ],
      ],
      'field_node_on_going' => $submission_data['this_grant_program_is_ongoing_and_does_have_an_open_close_dates_'],
      'field_topic' => [
        ['target_id' => $submission_data['topic']],
      ],
      'field_audience' => [],
      'field_node_funding_level' => [
        [
          'from' => $submission_data['funding_level_from'],
          'to' => $submission_data['funding_level_to'],
        ],
      ],
      'field_node_link' => [
        'uri' => $submission_data['website_url_for_grant_or_program_information'],
      ],
      'field_call_to_action' => [
        'uri' => $submission_data['website_url_to_apply_for_grant_or_program'],
        'title' => t('Apply now'),
      ],
      'field_node_author' => [
        'value' => $submission_data['contact_person'],
      ],
      'field_node_department' => [
        ['target_id' => $submission_data['department_agency_or_provider_organisation']],
      ],
      'field_node_email' => $submission_data['contact_email_address'],
      'field_node_phone' => $submission_data['contact_telephone_number'],
    ]);

    // Loop through multiple value fields.
    foreach ($submission_data['who_is_the_grant_or_program_for_'] as $topic) {
      $node->field_audience->appendItem($topic);
    }

    // Set the node to Needs Review state.
    $node->set('moderation_state', "needs_review");

    // Set Grant Author user as node author.
    if ($user = user_load_by_name('Grant Author')) {
      $node->setOwnerId($user->id());
    }

    $node->save();
  }
}

/**
 * Implements hook_migration_plugins_alter().
 */
function tide_grant_migration_plugins_alter(array &$migrations) {
  // If different URL has been provided via config then inject it.
  $url = \Drupal::config('tide_grant.settings')->get('feed_url');
  if ($url && UrlHelper::isValid($url, TRUE)) {
    $migrations['grants_feed_importer']['source']['urls'] = $url;
  }
}

/**
 * Implements hook_node_insert().
 */
function tide_grant_node_insert(NodeInterface $node) {
  // Everytime the feed will import contents, this will trigger.
  // Only update the grant nodes created by anonymous user.
  if (!empty($node) && $node->bundle() == 'grant' && $node->getOwnerId() == 0) {
    if ($node->hasField('field_metatags') && \Drupal::moduleHandler()->moduleExists('metatag')) {
      $node->set('field_metatags', serialize([
        'robots' => 'noindex',
      ]));
      $node->save();
    }
    if (\Drupal::moduleHandler()->moduleExists('simple_sitemap')) {
      $generator = \Drupal::service('simple_sitemap.generator');
      $settings = [
        'index' => FALSE,
        'priority' => 0.5,
        'changefreq' => 'never',
        'include_images' => FALSE,
      ];
      $generator->setEntityInstanceSettings($node->getEntityTypeId(), $node->id(), $settings);
    }
  }
}

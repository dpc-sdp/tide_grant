<?php

/**
 * @file
 * Tide Grant module install file..
 */

use Drupal\Component\Utility\Random;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Config\FileStorage;
use Drupal\user\Entity\User;
use Drupal\workflows\Entity\Workflow;
use Drupal\node\Entity\Node;

/**
 * Implements hook_install().
 */
function tide_grant_install() {
  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if (!\Drupal::service('config.installer')->isSyncing() && $moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()
        ->addEntityTypeAndBundle('node', 'grant');
      $editorial_workflow->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function tide_grant_uninstall() {
  // Remove the user we created.
  if ($user = user_load_by_name('Grant Author')) {
    user_delete($user->id());

  }

  // Now cleanup the config.
  $config_factory = \Drupal::configFactory();
  // Remove the image styles that Linkit has installed.
  $config_factory->getEditable('user.role.grant_author')->delete();
}

/**
 * Add Grant Guidelines to active config.
 */
function tide_grant_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  _tide_import_single_config('tide_grant.settings', $config_location);
}

/**
 * Remove paragraph type 'grants_overview'.
 */
function tide_grant_update_8002() {
  $grants_overview_type = \Drupal::entityManager()->getStorage('paragraphs_type')->load('grants_overview');
  if ($grants_overview_type) {
    $grants_overview_type->delete();
  }
}

/**
 * Add Grant Guidelines to active config.
 */
function tide_grant_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  _tide_import_single_config('webform.webform.tide_grant_submission', $config_location);
}

/**
 * Add Grant Author user.
 */
function tide_grant_update_8004() {
  // First import Grant Author role configuration.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  _tide_import_single_config('user.role.grant_author', $config_location);

  // Create new Grant Author user.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $user = User::create();

  $random = new Random();
  $pass = $random->string();
  $mail = $random->string();

  // Mandatory settings.
  $user->setPassword($pass);
  $user->enforceIsNew();
  $user->setEmail($mail . '@noreply.vic');
  $user->setUsername('Grant Author');
  $user->addRole('grant_author');

  // Optional settings.
  $user->set("init", 'email');
  $user->set("langcode", $language);
  $user->set("preferred_langcode", $language);
  $user->set("preferred_admin_langcode", $language);
  $user->activate();

  // Save user.
  $user->save();
}

/**
 * Remove Funding level text field from Grant Content Type [SDPA-1466].
 */
function tide_grant_update_8005() {
  /* @var $entityFieldManager Drupal\Core\Entity\EntityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');
  $fields = $entityFieldManager->getFieldDefinitions('node', 'grant');
  if (isset($fields['field_node_fundinglevel'])) {
    $fields['field_node_fundinglevel']->delete();
  }
}

/**
 * Uodate grant webform.
 */
function tide_grant_update_8006() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  _tide_import_single_config('webform.webform.tide_grant_submission', $config_location);
}

/**
 * Forced update of the field type using config from the module.
 */
function tide_grant_update_8007() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  _tide_import_single_config('core.entity_form_display.node.grant.default', $config_location);
  _tide_import_single_config('core.entity_view_display.node.grant.default', $config_location);
  _tide_import_single_config('field.field.node.grant.field_description', $config_location);
  _tide_import_single_config('field.storage.node.field_description', $config_location);
}

/**
 * Enable migration modules for feed imports and update config.
 */
function tide_grant_update_8008() {
  // Import feed URL configuration.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  _tide_import_single_config('tide_grant.settings', $config_location);
  // Enable migration modules.
  $module_installer = \Drupal::service('module_installer');
  $module_installer->install(['migrate_plus', 'migrate_cron', 'migrate_tools']);
}

/**
 * Change field_show_social_sharing field default value to 1.
 */
function tide_grant_update_8009() {
  $field = FieldConfig::loadByName('node', 'grant', 'field_show_social_sharing');
  if (!$field->get('default_value')) {
    $field->set('default_value', TRUE);
    $field->save();
  }
}

/**
 * Grant Webform Configuration access to API requests.
 */
function tide_grant_update_8010() {
  $webforms = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->loadByProperties(['id' => 'tide_grant_submission']);
  if ($webform = reset($webforms)) {
    /** @var \Drupal\webform\Entity\Webform $webform */
    $access_rules = $webform->getAccessRules();
    if (!isset($access_rules['configuration']['roles'])) {
      $access_rules['configuration'] = [
        'roles' => [AccountInterface::ANONYMOUS_ROLE],
        'users' => [],
        'permissions' => [],
      ];
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
    elseif (!in_array(AccountInterface::ANONYMOUS_ROLE, $access_rules['configuration']['roles'])) {
      $access_rules['configuration']['roles'][] = AccountInterface::ANONYMOUS_ROLE;
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
  }
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_grant_update_8011() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('grant', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'grant'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'grant'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Adds field metatags to tide_grant.
 */
function tide_grant_update_8012() {
  // Adding the field from config install.
  $metaTags = 'field.field.node.grant.field_metatags';
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_grant') . '/config/install'];
  // Check if field already exported to config/sync.
  $config_read = _tide_read_config($metaTags, $config_location, TRUE);

  // Obtain the storage manager for field instances.
  // Create a new field instance from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_config')
    ->create($config_read)
    ->save();

  // Adding the field to display form.
  $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.grant.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_metatags', [
      'weight' => 13,
      'settings' => ['sidebar' => TRUE],
      'third_party_settings' => [],
      'type' => 'metatag_firehose',
      'region' => 'content',
    ]);
  }
  $entity_form_display->save();

  // Adding the field to display view.
  $entity_view_display = Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.grant.default');
  if ($entity_view_display) {
    $entity_view_display->setComponent('field_metatags', [
      'weight' => 128,
      'label' => 'above',
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'metatag_empty_formatter',
      'region' => 'content',
    ]);
  }
  $entity_view_display->save();
}

/**
 * Update sitemap indexing and search metatag to noindex.
 */
function tide_grant_update_8013() {
  // Getting only the grant content type node ids.
  $nids = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->condition('type', 'grant')
    ->condition('uid', 0)
    ->execute();
  if (!empty($nids)) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      // Only update the grant nodes created by anonymous user.
      if ($node->getOwnerId() == 0) {
        if ($node->hasField('field_metatags') && \Drupal::moduleHandler()->moduleExists('metatag')) {
          $node->set('field_metatags', serialize([
            'robots' => 'noindex',
          ]));
          $node->setNewRevision(FALSE);
          $node->save();
        }
        if (\Drupal::moduleHandler()->moduleExists('simple_sitemap')) {
          $generator = \Drupal::service('simple_sitemap.generator');
          $settings = [
            'index' => FALSE,
            'priority' => 0.5,
            'changefreq' => 'never',
            'include_images' => FALSE,
          ];
          $generator->setEntityInstanceSettings($node->getEntityTypeId(), $node->id(), $settings);
        }
      }
    }
  }
}

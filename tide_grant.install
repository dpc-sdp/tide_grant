<?php

/**
 * @file
 * Tide Grant module install file..
 */

use Drupal\Component\Utility\Random;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\workflows\Entity\Workflow;
use Drupal\node\Entity\Node;

/**
 * Implements hook_install().
 */
function tide_grant_install() {
  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if (!\Drupal::service('config.installer')->isSyncing() && $moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()
        ->addEntityTypeAndBundle('node', 'grant');
      $editorial_workflow->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function tide_grant_uninstall() {
  // Remove the user we created.
  if ($user = user_load_by_name('Grant Author')) {
    user_delete($user->id());

  }

  // Now cleanup the config.
  $config_factory = \Drupal::configFactory();
  // Remove the image styles that Linkit has installed.
  $config_factory->getEditable('user.role.grant_author')->delete();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_grant_update_dependencies() {
  $dependencies = [
    'tide_grant' => [
      '8015' => ['tide_core' => 8045],
    ],
  ];

  return $dependencies;
}

/**
 * Add Grant Guidelines to active config.
 */
function tide_grant_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  _tide_import_single_config('tide_grant.settings', $config_location);
}

/**
 * Remove paragraph type 'grants_overview'.
 */
function tide_grant_update_8002() {
  $grants_overview_type = \Drupal::entityManager()->getStorage('paragraphs_type')->load('grants_overview');
  if ($grants_overview_type) {
    $grants_overview_type->delete();
  }
}

/**
 * Add Grant Guidelines to active config.
 */
function tide_grant_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  _tide_import_single_config('webform.webform.tide_grant_submission', $config_location);
}

/**
 * Add Grant Author user.
 */
function tide_grant_update_8004() {
  // First import Grant Author role configuration.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  _tide_import_single_config('user.role.grant_author', $config_location);

  // Create new Grant Author user.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $user = User::create();

  $random = new Random();
  $pass = $random->string();
  $mail = $random->string();

  // Mandatory settings.
  $user->setPassword($pass);
  $user->enforceIsNew();
  $user->setEmail($mail . '@noreply.vic');
  $user->setUsername('Grant Author');
  $user->addRole('grant_author');

  // Optional settings.
  $user->set("init", 'email');
  $user->set("langcode", $language);
  $user->set("preferred_langcode", $language);
  $user->set("preferred_admin_langcode", $language);
  $user->activate();

  // Save user.
  $user->save();
}

/**
 * Remove Funding level text field from Grant Content Type [SDPA-1466].
 */
function tide_grant_update_8005() {
  /** @var Drupal\Core\Entity\EntityFieldManager $entityFieldManager */
  $entityFieldManager = Drupal::service('entity_field.manager');
  $fields = $entityFieldManager->getFieldDefinitions('node', 'grant');
  if (isset($fields['field_node_fundinglevel'])) {
    $fields['field_node_fundinglevel']->delete();
  }
}

/**
 * Uodate grant webform.
 */
function tide_grant_update_8006() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  _tide_import_single_config('webform.webform.tide_grant_submission', $config_location);
}

/**
 * Forced update of the field type using config from the module.
 */
function tide_grant_update_8007() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  _tide_import_single_config('core.entity_form_display.node.grant.default', $config_location);
  _tide_import_single_config('core.entity_view_display.node.grant.default', $config_location);
  _tide_import_single_config('field.field.node.grant.field_description', $config_location);
  _tide_import_single_config('field.storage.node.field_description', $config_location);
}

/**
 * Enable migration modules for feed imports and update config.
 */
function tide_grant_update_8008() {
  // Import feed URL configuration.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  _tide_import_single_config('tide_grant.settings', $config_location);
  // Enable migration modules.
  $module_installer = \Drupal::service('module_installer');
  $module_installer->install(['migrate_plus', 'migrate_cron', 'migrate_tools']);
}

/**
 * Change field_show_social_sharing field default value to 1.
 */
function tide_grant_update_8009() {
  $field = FieldConfig::loadByName('node', 'grant', 'field_show_social_sharing');
  if (!$field->get('default_value')) {
    $field->set('default_value', TRUE);
    $field->save();
  }
}

/**
 * Grant Webform Configuration access to API requests.
 */
function tide_grant_update_8010() {
  $webforms = \Drupal::entityTypeManager()
    ->getStorage('webform')
    ->loadByProperties(['id' => 'tide_grant_submission']);
  if ($webform = reset($webforms)) {
    /** @var \Drupal\webform\Entity\Webform $webform */
    $access_rules = $webform->getAccessRules();
    if (!isset($access_rules['configuration']['roles'])) {
      $access_rules['configuration'] = [
        'roles' => [AccountInterface::ANONYMOUS_ROLE],
        'users' => [],
        'permissions' => [],
      ];
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
    elseif (!in_array(AccountInterface::ANONYMOUS_ROLE, $access_rules['configuration']['roles'])) {
      $access_rules['configuration']['roles'][] = AccountInterface::ANONYMOUS_ROLE;
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
  }
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_grant_update_8011() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles = [];
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('grant', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'grant'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'grant'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Adds field metatags to tide_grant.
 */
function tide_grant_update_8012() {
  // Adding the field from config install.
  $metaTags = 'field.field.node.grant.field_metatags';
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  // Check if field already exported to config/sync.
  $config_read = _tide_read_config($metaTags, $config_location, TRUE);

  // Obtain the storage manager for field instances.
  // Create a new field instance from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_config')
    ->create($config_read)
    ->save();

  // Adding the field to display form.
  $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.grant.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_metatags', [
      'weight' => 13,
      'settings' => ['sidebar' => TRUE],
      'third_party_settings' => [],
      'type' => 'metatag_firehose',
      'region' => 'content',
    ]);
  }
  $entity_form_display->save();

  // Adding the field to display view.
  $entity_view_display = Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.grant.default');
  if ($entity_view_display) {
    $entity_view_display->setComponent('field_metatags', [
      'weight' => 128,
      'label' => 'above',
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'metatag_empty_formatter',
      'region' => 'content',
    ]);
  }
  $entity_view_display->save();
}

/**
 * Update sitemap indexing and search metatag to noindex.
 */
function tide_grant_update_8013() {
  // Getting only the grant content type node ids.
  $nids = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->getQuery()
    ->condition('type', 'grant')
    ->condition('uid', 0)
    ->execute();
  if (!empty($nids)) {
    $nodes = Node::loadMultiple($nids);
    foreach ($nodes as $node) {
      // Only update the grant nodes created by anonymous user.
      if ($node->getOwnerId() == 0) {
        if ($node->hasField('field_metatags') && \Drupal::moduleHandler()->moduleExists('metatag')) {
          $node->set('field_metatags', serialize([
            'robots' => 'noindex',
          ]));
          $node->setNewRevision(FALSE);
          $node->save();
        }
        if (\Drupal::moduleHandler()->moduleExists('simple_sitemap')) {
          $generator = \Drupal::service('simple_sitemap.generator');
          $settings = [
            'index' => FALSE,
            'priority' => 0.5,
            'changefreq' => 'never',
            'include_images' => FALSE,
          ];
          $generator->setEntityInstanceSettings($node->getEntityTypeId(), $node->id(), $settings);
        }
      }
    }
  }
}

/**
 * Update tide_grant_submission to add states in funding_level_to field.
 */
function tide_grant_update_8014() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  // Get the new configs.
  $webform = 'webform.webform.tide_grant_submission';
  $config_path = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  // Rread it from the config sync directory.
  $webform_config = _tide_read_config($webform, $config_path, FALSE);
  $webform_elements = $webform_config['elements'];
  if ($webform_elements) {
    // Set the new configs in sync.
    $tide_grant_submission = \Drupal::configFactory()
      ->getEditable($webform);
    $tide_grant_submission->set('elements', $webform_elements)
      ->save();
  }
}

/**
 * Create a new field group.
 *
 * @param string $label
 *   The label.
 * @param string $type
 *   The format type (tabs, tab, etc.).
 * @param array $settings
 *   The format settings.
 * @param string $region
 *   The form region.
 * @param int $weight
 *   The weight.
 * @param string $parent
 *   The parent name.
 * @param array $children
 *   The list of child components.
 *
 * @return array
 *   The field group array.
 */
function _tide_grant_new_field_group(string $label, string $type, array $settings, string $region = 'content', int $weight = 0, string $parent = '', array $children = []) : array {
  return [
    'label' => $label,
    'parent_name' => $parent,
    'children' => $children,
    'format_type' => $type,
    'format_settings' => $settings,
    'region' => $region,
    'weight' => $weight,
  ];
}

/**
 * Create a new tabs field group.
 *
 * @param string $label
 *   The label.
 * @param string $direction
 *   The tabs direction (horizontal or vertical).
 * @param string $id
 *   The CSS ID.
 * @param string $classes
 *   The CSS classes.
 * @param string $region
 *   The form region.
 * @param int $weight
 *   The form weight.
 * @param string $parent
 *   The parent name.
 * @param array $children
 *   The list of child components.
 *
 * @return array
 *   The field group array.
 */
function _tide_grant_new_field_group_tabs(string $label, string $direction = 'horizontal', string $id = '', string $classes = '', string $region = 'content', int $weight = 0, string $parent = '', array $children = []) : array {
  return _tide_grant_new_field_group($label, 'tabs', [
    'direction' => $direction,
    'id' => $id,
    'classes' => $classes,
  ], $region, $weight, $parent, $children);
}

/**
 * Create a new tab field group.
 *
 * @param string $label
 *   The label.
 * @param string $parent
 *   The parent name.
 * @param array $settings
 *   The format settings.
 * @param string $region
 *   The form region.
 * @param int $weight
 *   The form weight.
 * @param array $children
 *   The list of child components.
 *
 * @return array
 *   The field group array.
 */
function _tide_grant_new_field_group_tab(string $label, string $parent, array $settings = [], string $region = 'content', int $weight = 0, array $children = []) : array {
  return _tide_grant_new_field_group($label, 'tab', [
    'description' => '',
    'formatter' => 'closed',
    'required_fields' => TRUE,
    'id' => '',
    'classes' => '',
  ] + $settings, $region, $weight, $parent, $children);
}

/**
 * Update node form of Grant.
 */
function tide_grant_update_8015() {
  // Update permissions for Admin and Site Admin.
  $permission = 'update grant author details';
  foreach (['site_admin', 'administrator'] as $role_id) {
    /** @var \Drupal\user\RoleInterface $role */
    $role = Role::load($role_id);
    if ($role) {
      $role->grantPermission($permission);
      $role->save();
    }
  }

  // Update the field instances.
  $update_field_config = [
    'field_landing_page_summary' => [
      'description' => t('Add short summary to introduce your grant. This summary will display on promotional cards or a card carousel.'),
    ],
    'field_landing_page_intro_text' => [
      'label' => t('Introduction text'),
      'description' => t('Add a brief summary of the page. This displays under the page title.'),
    ],
    'field_node_link' => [
      'label' => t('Redirect website'),
      'description' => t('You can redirect to another external site, when redirecting, other information below this point are not required.'),
    ],
    'field_featured_image' => [
      'description' => t("One image can be added and must be 496px high x 818px wide."),
    ],
    'field_show_social_sharing' => [
      'label' => t('Social sharing'),
      'required' => TRUE,
      'description' => t('The social sharing box can be hidden in special circumstances.'),
    ],
    'field_show_content_rating' => [
      'label' => t('Show content rating?'),
      'description' => t("Show 'Was this page helpful?' feedback form. Do not uncheck this form without admin approval."),
    ],
  ];

  foreach ($update_field_config as $field_name => $replacements) {
    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
    $field_config = FieldConfig::loadByName('node', 'grant', $field_name);
    if ($field_config) {
      $config = $field_config->toArray();
      $config = array_replace_recursive($config, $replacements);
      /** @var \Drupal\Core\Field\FieldConfigInterface $new_field_config */
      $new_field_config = FieldConfig::create($config);
      $new_field_config->original = $field_config;
      $new_field_config->enforceIsNew(FALSE);
      $new_field_config->save();
    }
  }

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $form_display = EntityFormDisplay::load('node.grant.default');
  if (!$form_display) {
    return;
  }

  // Update field widgets.
  $update_field_widgets = [
    // Header.
    'title' => 0,
    'field_landing_page_summary' => 10,
    'field_landing_page_intro_text' => 20,
    'field_node_link' => 30,
    // Featured image.
    'field_featured_image' => [
      'settings' => ['open' => TRUE],
      'weight' => -90,
    ],
    // Grant details.
    // Author detail.
    'field_node_department' => [
      'weight' => 50,
    ],
    // Sidebar.
    'field_node_documents' => [
      'settings' => ['open' => FALSE],
      'weight' => 0,
    ],
    // Sidebar - Contact.
    'field_landing_page_show_contact' => [
      'label' => t('Show contact details'),
      'weight' => 0,
    ],
    'field_landing_page_contact' => [
      'label' => t('Contact us'),
      'weight' => 10,
    ],
    // Sidebar.
    'field_show_social_sharing' => [
      'type' => 'options_buttons',
      'weight' => 30,
    ],
    // General.
    'field_topic' => ['weight' => 0],
    'field_show_content_rating' => ['weight' => 1],
  ];

  // Use Select2 for Department field.
  if (\Drupal::moduleHandler()->moduleExists('select2')) {
    foreach (['field_node_department'] as $select2_field) {
      $update_field_widgets[$select2_field]['type'] = 'select2_entity_reference';
      $update_field_widgets[$select2_field]['settings'] = [
        'match_operator' => 'CONTAINS',
        'match_limit' => 10,
        'autocomplete' => FALSE,
        'width' => '100%',
      ];
    }
  }

  foreach ($update_field_widgets as $field => $replacements) {
    $component = $form_display->getComponent($field);
    if ($component) {
      if (is_int($replacements)) {
        $replacements = ['weight' => $replacements];
      }
      $component = array_replace_recursive($component, $replacements);
      $form_display->setComponent($field, $component);
    }
  }

  // Update the field groups.
  $field_group = $form_display->getThirdPartySettings('field_group');

  // Header section.
  $field_group['group_section_header'] = _tide_grant_new_field_group_tabs('Header Section',
    'horizontal', 'node-form-group-header-section', '', 'content', -100);
  $field_group['group_section_header']['children'] = [
    'group_header',
  ];

  // Header - Header tab.
  $field_group['group_header'] = _tide_grant_new_field_group_tab('Header',
    'group_section_header', [], 'content', -99);
  $field_group['group_header']['children'] = [
    'title',
    'field_landing_page_intro_text',
    'field_landing_page_summary',
    'field_node_link',
  ];

  // Content section.
  $field_group['group_section_content'] = _tide_grant_new_field_group_tabs('Content Section',
    'horizontal', 'node-form-group-content-section', '', 'content', -70);
  $field_group['group_section_content']['children'] = [
    'group_grant_overview',
    'group_grant_author',
  ];

  // Grant overview.
  if (isset($field_group['group_grant_overview'])) {
    $field_group['group_grant_overview'] = array_replace_recursive($field_group['group_grant_overview'], [
      'label' => t('Grant overview'),
      'format_type' => 'details',
      'format_settings' => [
        'open' => FALSE,
        'description' => '',
      ],
      'parent_name' => 'group_section_content',
      'region' => 'content',
      'weight' => 10,
    ]);
  }

  // Grant author.
  if (isset($field_group['group_grant_author'])) {
    $field_group['group_grant_author'] = array_replace_recursive($field_group['group_grant_author'], [
      'label' => t('Grant Author'),
      'format_type' => 'details',
      'format_settings' => [
        'open' => FALSE,
        'description' => '',
      ],
      'parent_name' => 'group_section_content',
      'region' => 'content',
      'weight' => 20,
    ]);
  }

  // Timeline section.
  $field_group['group_section_timeline'] = _tide_grant_new_field_group_tabs('Timeline Section',
    'horizontal', 'node-form-group-timeline-section', '', 'content', -60);
  $field_group['group_section_timeline']['children'] = [
    'group_grant_timeline',
  ];
  if (isset($field_group['group_grant_timeline'])) {
    $field_group['group_grant_timeline'] = array_replace_recursive($field_group['group_grant_timeline'], [
      'label' => t('Grant timeline'),
      'format_type' => 'details',
      'format_settings' => [
        'open' => FALSE,
        'description' => '',
      ],
      'parent_name' => 'group_section_timeline',
      'region' => 'content',
      'weight' => 0,
    ]);
  }

  // Guideline section.
  $field_group['group_section_guideline'] = _tide_grant_new_field_group_tabs('Guideline Section',
    'horizontal', 'node-form-group-guideline-section', '', 'content', -50);
  $field_group['group_section_guideline']['children'] = [
    'group_guidelines',
  ];
  if (isset($field_group['group_guidelines'])) {
    $field_group['group_guidelines'] = array_replace_recursive($field_group['group_guidelines'], [
      'label' => t('Grant guidelines'),
      'format_type' => 'details',
      'format_settings' => [
        'open' => FALSE,
        'description' => '',
      ],
      'parent_name' => 'group_section_guideline',
      'region' => 'content',
      'weight' => 0,
    ]);
  }

  // Sidebar tabs.
  $field_group['group_section_sidebar'] = _tide_grant_new_field_group_tabs('Sidebar Section', 'horizontal', 'node-form-group-sidebar-section', '', 'content', -40, '', ['group_sidebar']);
  $field_group['group_sidebar'] = _tide_grant_new_field_group_tab('Sidebar', 'group_section_sidebar', [], 'content', -61);
  $field_group['group_sidebar']['children'] = [
    'group_contact_us',
    'field_node_documents',
    'field_show_social_sharing',
  ];

  $field_group['group_contact_us'] = _tide_grant_new_field_group('Contact', 'details', [
    'id' => '',
    'classes' => '',
    'formatter' => 'closed',
    'description' => t('Specific contact details - name, address, phone, email can be added in a block to the sidebar.'),
    'required_fields' => FALSE,
    'open' => FALSE,
  ], 'content', 20, 'group_sidebar', []);
  $field_group['group_contact_us']['children'] = [
    'field_landing_page_show_contact',
    'field_landing_page_contact',
  ];

  foreach ($field_group as $group_name => $group_settings) {
    $form_display->setThirdPartySetting('field_group', $group_name, $group_settings);
  }

  // Removes unused groups.
  $unused_groups = [
    'group_section_1',
    'group_grant_details',
    'group_page_header',
    'group_body_content',
    'group_supporting_documents',
    'group_right_column',
    'group_social_media',
    'group_content_rating',
    'group_contact',
  ];
  foreach ($unused_groups as $group_name) {
    unset($field_group[$group_name]);
    $form_display->unsetThirdPartySetting('field_group', $group_name);
  }

  $form_display->save();
}

/**
 * Update display form for tiemline.
 */
function tide_grant_update_8016() {
  // Update the form and view display.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_grant') . '/config/install'];
  $config_id = 'core.entity_form_display.paragraph.timeline.grants';
  $display_config = \Drupal::configFactory()->getEditable($config_id);
  $display_config_read = _tide_read_config($config_id, $config_location, FALSE);
  $fields_settings = $display_config_read['content'];
  $dependencies = $display_config_read['dependencies']['config'];
  if ($display_config) {
    $display_config->set('content', $fields_settings);
    $display_config->set('dependencies.config', $dependencies);
    $display_config->save();
  }
}

/**
 * Remove deprecated modules before d10 upgrade.
 */
function tide_grant_update_8017() {
  // Check if module is both installed and enabled.
  if (\Drupal::moduleHandler()->moduleExists('migrate_cron')) {
    // If exists, uninstall module.
    \Drupal::service('module_installer')->uninstall(['migrate_cron']);
  }
  $config_factory = \Drupal::configFactory();
  // Delete the related config.
  $config = $config_factory->getEditable('migrate_cron.settings.yml');
  if ($config) {
    $config->delete();
  }
}
